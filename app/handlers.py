from aiogram import F, Router, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from unittest.mock import patch

import app.database.requests as rq
from app.scoring_utils.wildberries import fetch_wildberries_data
from app.scoring_utils.checko import fetch_checko_data
from app.scoring_utils.historical_excel import get_seller_data_from_excel
from app.scoring_utils.scoring_risks import RiskAnalysis
import requests
import json
import random  
import re

router = Router()

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –Ø–≤–Ω—ã–π API-–∫–ª—é—á Yandex GPT (–≤—Ä–µ–º–µ–Ω–Ω–æ)
YANDEX_GPT_API_KEY = "AQVNzpC6YgzXzixqHMjlWioapUB9MSNhgD5xv9Br"  # ‚Üê –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API-–∫–ª—é—á –∑–¥–µ—Å—å

class Scoring(StatesGroup):
    name = State()
    number = State()
    inn = State()
    marketplace_link = State()

### üìå 1. –ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
@router.message(CommandStart())
async def start_command(message: Message):
    consent_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_granted")]
        ]
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ finalb –ø–æ–º–æ—â–Ω–∏–∫!\n"
        "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=consent_markup
    )

@router.callback_query(lambda c: c.data == "consent_granted")
async def process_consent(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –≤ –ë–î –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –°–û–ì–õ–ê–°–ò–Ø
    await rq.set_user(user_id)
    await rq.update_data_permission(user_id, True)  # –§–∏–∫—Å–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    
    await callback_query.message.edit_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/scoring - –ó–∞–ø—É—Å–∫ —Å–∫–æ—Ä–∏–Ω–≥–∞\n"
        "/revoke_consent - –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    )
    await callback_query.answer()


### üìå 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("revoke_consent"))
async def revoke_consent_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="confirm_revoke")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_revoke")]
        ]
    )
    
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? "
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data in ["confirm_revoke", "cancel_revoke"])
async def process_revoke(callback_query: CallbackQuery):
    if callback_query.data == "confirm_revoke":
        await rq.delete_user(callback_query.from_user.id)
        await callback_query.message.edit_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.")
    else:
        await callback_query.message.edit_text("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

    await callback_query.answer()


### üìå 3. –ó–∞–ø—Ä–æ—Å —Å–∫–æ—Ä–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
@router.message(Command('scoring'))
async def register_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await rq.get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –¥–∞–ª –ª–∏ –æ–Ω —Å–æ–≥–ª–∞—Å–∏–µ
    if not user or not user.data_permission:
        await message.answer("–í—ã –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–§–ò–û)
    await state.set_state(Scoring.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û")


### üìå 4. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –ò–ù–ù)
@router.message(Scoring.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Scoring.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

@router.message(Scoring.number)
async def register_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await state.set_state(Scoring.inn)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù')



@router.message(Scoring.inn)
async def register_inn(message: Message, state: FSMContext):
    await state.update_data(inn=message.text)
    await state.set_state(Scoring.marketplace_link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ")



@router.message(Scoring.marketplace_link)
async def register_marketplace_link(message: Message, state: FSMContext):
    await state.update_data(marketplace_link=message.text)  # üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    data = await state.get_data()

    await rq.update_user_data(
        tg_id=message.from_user.id, 
        name=data.get("name"),  # –ò–º—è
        phone_number=data.get("number"),  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        inn=data["inn"],  # –ò–ù–ù
        marketplace_link=data["marketplace_link"]  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    )

    # **–ü–æ–ª—É—á–∞–µ–º seller_id –∏–∑ marketplace_link**
    seller_id_match = re.search(r"/seller/(\d+)", data["marketplace_link"])
    if not seller_id_match:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å seller_id –∏–∑ —Å—Å—ã–ª–∫–∏.")
        return

    seller_id = seller_id_match.group(1)

    # **–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Wildberries API**
    wildberries_data = await fetch_wildberries_data(seller_id)

    checko_data = await fetch_checko_data(data["inn"])

    excel_data = get_seller_data_from_excel("–ò—Å—Ç–æ—Ä –¥–∞–Ω–Ω—ã–µ.xlsx", data["marketplace_link"])

    # **–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**
    await message.answer(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã!\n\n"
        f"üìå <b>–§–ò–û:</b> {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìå <b>–ò–ù–ù:</b> {data['inn']}\n"
        f"üìå <b>–ù–æ–º–µ—Ä:</b> {data.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìå <b>–ü—Ä–æ—Ñ–∏–ª—å Wildberries:</b> {data['marketplace_link']}\n\n"
        f"üìä <b>–î–∞–Ω–Ω—ã–µ Wildberries:</b>\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {wildberries_data.get('valuation', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üí¨ –û—Ç–∑—ã–≤—ã: {wildberries_data.get('feedbacks_count', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üì¶ –ü—Ä–æ–¥–∞–∂–∏: {wildberries_data.get('sale_quantity', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"        
        f"üõë –ù–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: {checko_data.get('–ù–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üë®‚Äçüíº –ú–∞—Å—Å–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {checko_data.get('–ú–∞—Å—Å–æ–≤—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üè¢ –ú–∞—Å—Å–æ–≤—ã–π —É—á—Ä–µ–¥–∏—Ç–µ–ª—å: {checko_data.get('–ú–∞—Å—Å–æ–≤—ã–π —É—á—Ä–µ–¥–∏—Ç–µ–ª—å', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"‚ö†Ô∏è –°–∞–Ω–∫—Ü–∏–∏: {checko_data.get('–°–∞–Ω–∫—Ü–∏–∏', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üì¶ –†–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤: {excel_data.get('–†–∞–∑–¥–µ–ª —Ç–æ–≤–∞—Ä–æ–≤', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"üõçÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {excel_data.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}",
        parse_mode="HTML"
    )

    # **–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤**
    risk_analysis = RiskAnalysis()
    risk_analysis.analyze({
        "valuation": wildberries_data.get("valuation"),
        "feedbacks_count": wildberries_data.get("feedbacks_count"),
        "sale_quantity": wildberries_data.get("sale_quantity"),
        "mass_rukovod": checko_data.get("mass_rukovod"),
        "sanctions": checko_data.get("sanctions"),
        "category": excel_data.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
    })

    # **–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞**
    risks = risk_analysis.get_results()

    # **–§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º**
    def escape_html(text):
        return str(text).replace("<", "&lt;").replace(">", "&gt;")

    risk_summary = "\n".join(
        [f"üî¥ {escape_html(r)}" for r in risks["high_risks"]] +
        [f"üü† {escape_html(r)}" for r in risks["medium_risks"]] +
        [f"üü° {escape_html(r)}" for r in risks["low_risks"]]
    )

    # **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤**
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{risk_summary}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    await message.answer(
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:</b>\n{risk_summary if risk_summary else '–†–∏—Å–∫–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã'}",
        parse_mode="HTML"
    )

    # **–ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ**
    await state.clear()






@router.callback_query(lambda c: c.data == 'show_reasons')
async def show_reasons(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer() 

    mock_response_data = [
        {
            "inn": "1234567890",
            "ogrn": "1234567890123",
            "focusHref": "https://focus.kontur.ru/card/1234567890",
            "scoringData": [
                {
                    "modelId": "model_1",
                    "modelName": "Standard Scoring Model",
                    "modelUpdateDate": "2024-01-01",
                    "rating": 39, 
                    "ratingLevel": "High",
                    "triggeredMarkers": [
                        {
                            "markerId": "marker_1",
                            "impact": "Reliability",
                            "weight": "Moderate",
                            "name": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞",
                            "description": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞."
                        },
                        {
                            "markerId": "marker_2",
                            "impact": "Reliability",
                            "weight": "Moderate",
                            "name": "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
                            "description": "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—É–º–º—É 450 000 —Ä—É–±–ª–µ–π."
                        }
                    ]
                }
            ]
        }
    ]

    markers = mock_response_data[0]['scoringData'][0]['triggeredMarkers']

    for marker in markers:
        await callback_query.message.answer(
            f'–ü—Ä–∏—á–∏–Ω–∞: {marker["name"]}\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ: {marker["description"]}\n'
            f'–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å?'
        )

        await callback_query.message.answer(
            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å', callback_data=f'fix_{marker["name"]}')]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
@router.callback_query(lambda c: c.data.startswith('fix_'))
async def fix_marker(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–∞—Ä–∫–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    marker_name = callback_query.data[4:]  # –£–±–∏—Ä–∞–µ–º 'fix_' –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É Yandex GPT –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
    gpt_response = await query_yandex_gpt(marker_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É:</b> <b>{marker_name}</b>\n\n{gpt_response}",
        parse_mode="HTML"
    )

async def query_yandex_gpt(marker_name: str) -> str:
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex GPT
    prompt = {
        "modelUri": "gpt://b1gtrijf1l4e7qqg3o8m/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "2000"
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\
                –ö —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏.\
                –ü—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –ø—É—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏.\
                –ù–µ –≥—Ä—É–∑–∏ –∫–ª–∏–µ–Ω—Ç–∞, –¥–∞–π –º–∞–∫—Å–∏–º—É–º 3 —Å–æ–≤–µ—Ç–∞"
            },
            {
                "role": "user",
                "text": "{marker_name}"
            }
        ]
    }


    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Api-Key AQVNzpC6YgzXzixqHMjlWioapUB9MSNhgD5xv9Br"
    }

    response = requests.post(url, headers=headers, json=prompt)

    if response.status_code == 200:
        return response.json()['result']['alternatives'][0]['message']['text']
    else:
        return f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}"