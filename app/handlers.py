from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.database.requests as rq
import requests
import json

router = Router()

class Scoring(StatesGroup):
    name = State()
    number = State()
    inn = State()
    

@router.message(CommandStart())
async def start_command(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ finalb –ø–æ–º–æ–º—à–Ω–∏–∫!\n–Ø —É–º–µ—é:\n/register - –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n/assistent - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n/scoring - –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞')


@router.message(Command('assistent'))
async def help_command(message: Message):
    await message.answer('–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å–∏—Ç—Å–µ–Ω—Ç! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å')

@router.message(Command('scoring'))
async def register_command(message: Message, state: FSMContext):
    await state.set_state(Scoring.name)
    await message.answer('–î–ª—è —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª—Ñ–æ–Ω–∞, –ò–ù–ù.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')

@router.message(Scoring.name)
async def register_name(message: Message, state: FSMContext):
     await state.update_data(name=message.text)
     await state.set_state(Scoring.number)
     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

@router.message(Scoring.number)
async def register_number(message: Message, state: FSMContext):
     await state.update_data(number=message.text)
     await state.set_state(Scoring.inn)
     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–Ω–Ω')

@router.message(Scoring.inn)
async def register_name(message: Message, state: FSMContext):
     await state.update_data(inn=message.text)
     data = await state.get_data()
     url = f'https://focus-api.kontur.ru/api3/scoring?inn={data["inn"]}&key=DEMO493156a753c0d86fb24c130fae824427c93a'
     response = requests.get(url)
     responseData = response.json()
     rating = responseData[0]['scoringData'][0]['rating']

     if 0 <= rating <= 39:
        emoji = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ 0-39
     elif 40 <= rating <= 69:
        emoji = "üü°"  # –ñ–µ–ª—Ç—ã–π –∫—Ä—É–≥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ 40-69
     elif 70 <= rating <= 100:
        emoji = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ 70-100
     else:
        emoji = "‚ùì"  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã

     await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –∏–Ω–Ω: {data["inn"]}\n–ù–æ–º–µ—Ä: {data["number"]}\n–í–∞—à —Å–∫–æ—Ä–∏–Ω–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating} {emoji}')
     await state.clear()

