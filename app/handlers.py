from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from unittest.mock import patch
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import app.keyboards as kb
import app.database.requests as rq
import requests
import json

router = Router()

class Scoring(StatesGroup):
    name = State()
    number = State()
    inn = State()
    

@router.message(CommandStart())
async def start_command(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ finalb –ø–æ–º–æ–º—à–Ω–∏–∫!\n–Ø —É–º–µ—é:\n/scoring - –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞')


@router.message(Command('assistent'))
async def help_command(message: Message):
    await message.answer('–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å–∏—Ç—Å–µ–Ω—Ç! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å')

@router.message(Command('scoring'))
async def register_command(message: Message, state: FSMContext):
    consent_markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data='yes')]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer('–î–ª—è —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: —Å–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?', reply_markup=consent_markup)

@router.callback_query(lambda c: c.data == 'yes')
async def process_consent(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    user_id = callback_query.from_user.id
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await rq.update_data_permission(user_id, True)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ permission –≤ True

    await state.set_state(Scoring.name)
    await callback_query.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')


@router.message(Scoring.name)
async def register_name(message: Message, state: FSMContext):
     await state.update_data(name=message.text)
     await state.set_state(Scoring.number)
     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

@router.message(Scoring.number)
async def register_number(message: Message, state: FSMContext):
     await state.update_data(number=message.text)
     await state.set_state(Scoring.inn)
     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–Ω–Ω')

@router.message(Scoring.inn)
async def register_inn(message: Message, state: FSMContext):
    await state.update_data(inn=message.text)
    data = await state.get_data()

    await rq.update_user_data(
        tg_id=message.from_user.id, 
        name=data.get("name"),  # –ò–º—è
        phone_number=data.get("number"),  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        inn=data["inn"]  # –ò–ù–ù
    )
    
    url = f'https://focus-api.kontur.ru/api3/scoring?inn={data["inn"]}&key=DEMO493156a753c0d86fb24c130fae824427c93a'

    # –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    mock_response_data = [
        {
            "inn": "1234567890",
            "ogrn": "1234567890123",
            "focusHref": "https://focus.kontur.ru/card/1234567890",
            "scoringData": [
                {
                    "modelId": "model_1",
                    "modelName": "Standard Scoring Model",
                    "modelUpdateDate": "2024-01-01",
                    "rating": 39,
                    "ratingLevel": "High",
                    "triggeredMarkers": [
                        {
                            "markerId": "marker_1",
                            "impact": "Reliability",
                            "weight": "Moderate",
                            "name": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞",
                            "description": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞."
                        },
                        {
                            "markerId": "marker_2",
                            "impact": "Reliability",
                            "weight": "Moderate",
                            "name": "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
                            "description": "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—É–º–º—É 450 000 —Ä—É–±–ª–µ–π."
                        }
                    ]
                }
            ]
        }
    ]

    with patch('requests.get') as mock_get:
        mock_get.return_value.json.return_value = mock_response_data
        response = requests.get(url)
        responseData = response.json()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –∑–∞–º–æ–∫–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        rating = responseData[0]['scoringData'][0]['rating']
        markers = responseData[0]['scoringData'][0]['triggeredMarkers']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        if 0 <= rating <= 39:
            emoji = "üî¥"
        elif 40 <= rating <= 69:
            emoji = "üü°"
        elif 70 <= rating <= 100:
            emoji = "üü¢"
        else:
            emoji = "‚ùì"

        await message.answer(
            f'–í–∞—à–µ –∏–º—è: {data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")}\n'
            f'–í–∞—à –∏–Ω–Ω: {data["inn"]}\n'
            f'–ù–æ–º–µ—Ä: {data.get("number", "–ù–µ —É–∫–∞–∑–∞–Ω")}\n'
            f'–í–∞—à —Å–∫–æ—Ä–∏–Ω–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating} {emoji}'
        )


        if markers:
            await message.answer(
                '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—á–∏–Ω –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–∏—Ö?',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–î–∞', callback_data='show_reasons')]
                ])
            )

        await state.clear()


@router.callback_query(lambda c: c.data == 'show_reasons')
async def show_reasons(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer() 

    mock_response_data = [
        {
            "inn": "1234567890",
            "ogrn": "1234567890123",
            "focusHref": "https://focus.kontur.ru/card/1234567890",
            "scoringData": [
                {
                    "modelId": "model_1",
                    "modelName": "Standard Scoring Model",
                    "modelUpdateDate": "2024-01-01",
                    "rating": 39, 
                    "ratingLevel": "High",
                    "triggeredMarkers": [
                        {
                            "markerId": "marker_1",
                            "impact": "Reliability",
                            "weight": "Moderate",
                            "name": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞",
                            "description": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞."
                        },
                        {
                            "markerId": "marker_2",
                            "impact": "Reliability",
                            "weight": "Moderate",
                            "name": "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏",
                            "description": "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—É–º–º—É 450 000 —Ä—É–±–ª–µ–π."
                        }
                    ]
                }
            ]
        }
    ]

    markers = mock_response_data[0]['scoringData'][0]['triggeredMarkers']

    for marker in markers:
        await callback_query.message.answer(
            f'–ü—Ä–∏—á–∏–Ω–∞: {marker["name"]}\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ: {marker["description"]}\n'
            f'–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å?'
        )

        await callback_query.message.answer(
            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å', callback_data=f'fix_{marker["name"]}')]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
@router.callback_query(lambda c: c.data.startswith('fix_'))
async def fix_marker(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–∞—Ä–∫–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    marker_name = callback_query.data[4:]  # –£–±–∏—Ä–∞–µ–º 'fix_' –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É Yandex GPT –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
    gpt_response = await query_yandex_gpt(marker_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É '{marker_name}':\n{gpt_response}"
    )

async def query_yandex_gpt(marker_name: str) -> str:
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex GPT
    prompt = {
        "modelUri": "gpt://b1gtrijf1l4e7qqg3o8m/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "2000"
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\
                –ö —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏.\
                –ü—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –ø—É—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏.\
                –ù–µ –≥—Ä—É–∑–∏ –∫–ª–∏–µ–Ω—Ç–∞, –¥–∞–π –º–∞–∫—Å–∏–º—É–º 3 —Å–æ–≤–µ—Ç–∞"
            },
            {
                "role": "user",
                "text": "{marker_name}"
            }
        ]
    }


    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Api-Key AQVN2v80bFuxVQGnizZzIzeC6W3l8jZrvmjEIOTk"
    }

    response = requests.post(url, headers=headers, json=prompt)

    if response.status_code == 200:
        return response.json()['result']['alternatives'][0]['message']['text']
    else:
        return f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}"